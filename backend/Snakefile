##############################################

#    SnakeFile
#
##############################################
# 
# 
# This file is responsible for co-ordinating the pipeline to create
# all graphs / tables that are displayed within the website.
# 
#
# Key commands
#   - Rebuild Database
#     ./bin/sm db
# 
#   - Remove all prior content (except database)
#     ./bin/sm clean
#
#   - Remove dead lingering R processes (bug of vscode-R)
#     ./bin/sm killr
#
#   - Output Datasets
#         patchmeta
#         data/processed/{period}/matchmeta.log
#         data/processed/{period}/{filter}/matchmeta_filter.log
#         data/processed/{period}/{filter}/pr.parquet
#         data/processed/{period}/{filter}/cvc.Rds
#         data/processed/{period}/{filter}/wr_avg.parquet
#         data/processed/{period}/{filter}/wr_naive.parquet
#
#    - Outputs
#          outputs/{period}/{filter}/descriptives.log
#          outputs/{period}/{filter}/civ_dendro.png
#          outputs/{period}/{filter}/win_rates.log
#          outputs/{period}/{filter}/sliding_window.log
#          outputs/{period}/{filter}/play_rates.log
#          outputs/{period}/{filter}/wr_estimated.log
# 
#     Examples:
#          ./bin/sm data/processed/matchmeta.log
#          ./bin/sm data/processed/p03_v05/rm_solo_open/matchmeta_filter.log
#          ./bin/sm outputs/p03_v05/rm_solo_open/win_rates.log
#          ./bin/sm outputs/p03_v05/rm_solo_open/wr_estimated.log
#          ./bin/sm outputs/p03_v05/rm_solo_open/play_rates.log
#          ./bin/sm outputs/p03_v05/rm_solo_open/sliding_window.log
#          ./bin/sm outputs/p03_v05/rm_solo_open/descriptives.log
#          ./bin/sm outputs/p03_v05/rm_solo_open/civ_dendro.png
#          ./bin/sm outputs/p03_v05/rm_solo_open/civ_wr_rank.png
#          ./bin/sm outputs/p03_v05/rm_solo_open/civ_wr_bt.png
#          ./bin/sm outputs/p03_v05/rm_solo_open/civ_wr_pr_bt.png
#          ./bin/sm outputs/p03_v05/rm_solo_open/output.log
#
#
#
#
#     output groups:
#        ./bin/sm outputs/p03_v05/rm_solo_all/output.log
#        ./bin/sm outputs/p03_v05/rm_solo_open/output.log
#        ./bin/sm outputs/p03_v05/rm_solo_closed/output.log
#        ./bin/sm outputs/p03_v05/rm_team_all/output.log
#        ./bin/sm outputs/p03_v05/rm_team_open/output.log
#        ./bin/sm outputs/p03_v05/rm_team_closed/output.log
#        ./bin/sm outputs/p03_v05/rm_solo_open_pro/output.log
#        ./bin/sm outputs/p03_v05/rm_solo_closed_pro/output.log
#        ./bin/sm outputs/p03_v05/rm_solo_open_nopick/output.log
#        ./bin/sm outputs/p03_v05/rm_solo_closed_nopick/output.log
#
#
#
#     output period
#        export PERIOD_TEMP=p03_v03
#       ./bin/sm outputs/$PERIOD_TEMP/rm_solo_all/output.log \
#                outputs/$PERIOD_TEMP/rm_solo_open/output.log \
#                outputs/$PERIOD_TEMP/rm_solo_closed/output.log \
#                outputs/$PERIOD_TEMP/rm_team_all/output.log \
#                outputs/$PERIOD_TEMP/rm_team_open/output.log \
#                outputs/$PERIOD_TEMP/rm_team_closed/output.log \
#                outputs/$PERIOD_TEMP/rm_solo_open_pro/output.log \
#                outputs/$PERIOD_TEMP/rm_solo_closed_pro/output.log \
#                outputs/$PERIOD_TEMP/rm_solo_open_nopick/output.log \
#                outputs/$PERIOD_TEMP/rm_solo_closed_nopick/output.log
#
#

import json


with open("./data/raw/config.json", "r") as fi:
    config = json.load(fi)


all_outputs_nested = [
    expand(
        "outputs/{period}/{filter}/output.log",
        filter = config["periods"][i]["filters"],
        period = i
    ) for i in config["periods"].keys()
]

all_outputs = [ output for output_list in all_outputs_nested for output in output_list ]

rule all:
    input:
        all_outputs,
        "outputs/global/global_elo_dist_solo_ew.png",
        "outputs/global/global_elo_dist_solo.png",
        "outputs/global/global_elo_dist_team.png",
        "outputs/global/global_elo_time_AVG.png",
        "outputs/global/global_elo_time_NGAME.png",
        "outputs/global/global_elo_time_NPLAYER.png",
        "outputs/global/global_elo_games_SOLO.png",
        "outputs/global/global_elo_games_SOLO_EW.png",
        "outputs/global/global_elo_games_TEAM.png"


rule db:
    shell: "python3.9 ./analysis/db_update.py"


rule clean:
    shell:
        """
        rm -rf data/processed/*
        rm -rf outputs/*
        rm -rf logs/*
        """


rule killr:
    shell:
        """
        kill -9 $(ps -u docker | awk '$4=="R" {{ printf "%s ", $1 }}')
        """



# Used to periodically update strings, not apart of overall pipeline
rule strings:
    output: "data/raw/strings.json"
    input: "data/raw/strings.py"
    shell: "python3.9 {input[0]}"



###############################
#
# Analysis Datasets
#
#



rule ad_matchmeta:
    output: "data/processed/matchmeta.log"
    input: "analysis/ad_matchmeta.R"
    resources: load=60
    log: "logs/ad_matchmeta.log"
    shell: "Rscript {input[0]} > {log} 2>&1"



rule ad_matchmeta_filter:
    output: "data/processed/{period}/{filter}/matchmeta_filter.log"
    input:
        "analysis/ad_matchmeta_filter.R"
    resources: load=60
    log: "logs/{period}/{filter}/ad_matchmeta_filter.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule ad_pr:
    output: "data/processed/{period}/{filter}/pr.parquet"
    input:
        "analysis/ad_pr.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    log: "logs/{period}/{filter}/ad_pr.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule ad_cvc:
    output: "data/processed/{period}/{filter}/cvc.Rds"
    input:
        "analysis/ad_cvc.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    resources: load=90
    log: "logs/{period}/{filter}/ad_cvc.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule ad_wr_avg:
    output: "data/processed/{period}/{filter}/wr_avg.parquet"
    input:
        "analysis/ad_wr_avg.R",
        "data/processed/{period}/{filter}/cvc.Rds"
    log: "logs/{period}/{filter}/ad_wr_avg.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule ad_wr_naive:
    output: 
        "data/processed/{period}/{filter}/wr_naive.parquet",
        "outputs/{period}/{filter}/wr_naive.json"
    input:
        "analysis/ad_wr_naive.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    log: "logs/{period}/{filter}/ad_wr_naive.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule ad_wr_boot:
    output: 
        "data/processed/{period}/{filter}/wr_boot.parquet",
        "data/processed/{period}/{filter}/wr_boot_raw.parquet"
    input:
        "analysis/ad_wr_boot.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    resources: load=90
    log: "logs/{period}/{filter}/ad_wr_boot.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule ad_wr_bt:
    output: "data/processed/{period}/{filter}/wr_bt.parquet"
    input:
        "analysis/ad_wr_bt.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    log: "logs/{period}/{filter}/ad_wr_bt.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule ad_slide_wr_elo:
    output: "data/processed/{period}/{filter}/ad_slide_WR_ELO.parquet"
    input:
        "analysis/ad_slide_wr_elo.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    log: "logs/{period}/{filter}/ad_slide_wr_elo.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule ad_slide_wr_gl:
    output: "data/processed/{period}/{filter}/ad_slide_WR_GL.parquet"
    input:
        "analysis/ad_slide_wr_gl.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    log: "logs/{period}/{filter}/ad_slide_wr_gl.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule ad_slide_wr_ggl:
    output: "data/processed/{period}/{filter}/ad_slide_WR_GGL.parquet"
    input:
        "analysis/ad_slide_wr_ggl.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    log: "logs/{period}/{filter}/ad_slide_wr_ggl.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"


rule ad_slide_pr_elo:
    output: "data/processed/{period}/{filter}/ad_slide_PR_ELO.parquet"
    input:
        "analysis/ad_slide_pr_elo.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    log: "logs/{period}/{filter}/ad_slide_pr_elo.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



###############################
#
# Outputs
#
#


rule outputs:
    output:
        touch("outputs/{period}/{filter}/output.log")
    input:
        "outputs/{period}/{filter}/descriptives.log",
        "outputs/{period}/{filter}/civ_dendro.png",
        "outputs/{period}/{filter}/win_rates.log",
        "outputs/{period}/{filter}/sliding_window.log",
        "outputs/{period}/{filter}/play_rates.log",
        "outputs/{period}/{filter}/wr_estimated.log",
        "outputs/{period}/{filter}/civ_wr_rank.png",
        "outputs/{period}/{filter}/civ_wr_bt.png",
        "outputs/{period}/{filter}/civ_wr_pr_bt.png",
        "outputs/{period}/{filter}/cvc.json",
        "outputs/{period}/{filter}/wr_naive.json"


rule cvcjson:
    output: "outputs/{period}/{filter}/cvc.json"
    input:
        "analysis/j_cvc.R",
        "data/processed/{period}/{filter}/cvc.Rds"
    log: "logs/{period}/{filter}/j_cvc.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule descriptives:
    output: "outputs/{period}/{filter}/descriptives.log"
    input:
        "analysis/g_descriptives.R",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    log: "logs/{period}/{filter}/g_descriptives.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule civ_dendro:
    output: "outputs/{period}/{filter}/civ_dendro.png"
    input:
        "analysis/g_civ_dendro.R",
        "data/processed/{period}/{filter}/cvc.Rds"
    log: "logs/{period}/{filter}/g_civ_dendro.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule win_rates:
    output: "outputs/{period}/{filter}/win_rates.log"
    input:
        "analysis/g_win_rates.R",
        "data/processed/{period}/{filter}/pr.parquet",
        "data/processed/{period}/{filter}/wr_avg.parquet",
        "data/processed/{period}/{filter}/wr_naive.parquet",
        "data/processed/{period}/{filter}/wr_boot_raw.parquet"
    log: "logs/{period}/{filter}/g_win_rates.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule win_rates_rank:
    output: "outputs/{period}/{filter}/civ_wr_rank.png"
    input:
        "analysis/g_wr_rank.R",
        "data/processed/{period}/{filter}/wr_boot.parquet"
    log: "logs/{period}/{filter}/g_wr_rank.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule win_rates_bt:
    output:
        "outputs/{period}/{filter}/civ_wr_bt.png",
        "outputs/{period}/{filter}/civ_wr_pr_bt.png"
    input:
        "analysis/g_wr_bt.R",
        "data/processed/{period}/{filter}/wr_bt.parquet",
        "data/processed/{period}/{filter}/pr.parquet",
    log: "logs/{period}/{filter}/g_wr_bt.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule sliding_window:
    output: "outputs/{period}/{filter}/sliding_window.log"
    input:
        "analysis/g_sliding_window.R",
        "data/processed/{period}/{filter}/ad_slide_WR_ELO.parquet",
        "data/processed/{period}/{filter}/ad_slide_PR_ELO.parquet",
        "data/processed/{period}/{filter}/ad_slide_WR_GGL.parquet",
        "data/processed/{period}/{filter}/ad_slide_WR_GL.parquet"
    resources:
        cpu=3,
        load=40
    log: "logs/{period}/{filter}/g_sliding_window.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"



rule play_rates:
    output: "outputs/{period}/{filter}/play_rates.log"
    input:
        "analysis/g_play_rates.R",
        "data/processed/{period}/{filter}/pr.parquet",
        "data/processed/{period}/{filter}/matchmeta_filter.log"
    log: "logs/{period}/{filter}/g_play_rates.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"


rule wr_estimated:
    output: "outputs/{period}/{filter}/wr_estimated.log"
    input:
        "analysis/g_wr_estimated.R",
        "data/processed/{period}/{filter}/pr.parquet",
        "data/processed/{period}/{filter}/wr_naive.parquet"
    log: "logs/{period}/{filter}/g_wr_estimated.log"
    shell: "Rscript {input[0]} {wildcards.period} {wildcards.filter} > {log} 2>&1"




###############################
#
# Global
#
#


rule global_elo_dist:
    input:
        "analysis/global_elo_dist.R",
        "data/processed/matches.parquet"
    output:
        "outputs/global/global_elo_dist_solo_ew.png",
        "outputs/global/global_elo_dist_solo.png",
        "outputs/global/global_elo_dist_team.png"
    log: "logs/global/global_elo_dist.log"
    shell: "Rscript {input[0]} > {log} 2>&1"



rule global_per_day:
    input:
        "analysis/global_per_day.R",
        "data/processed/matches.parquet"
    output:
        "outputs/global/global_elo_time_AVG.png",
        "outputs/global/global_elo_time_NGAME.png",
        "outputs/global/global_elo_time_NPLAYER.png"
    log: "logs/global/global_per_day.log"
    shell: "Rscript {input[0]} > {log} 2>&1"



rule global_elo_games:
    input:
        "analysis/global_elo_games.R",
        "data/processed/matches.parquet"
    output:
        "outputs/global/global_elo_games_SOLO.png",
        "outputs/global/global_elo_games_SOLO_EW.png",
        "outputs/global/global_elo_games_TEAM.png"
    log: "logs/global/global_elo_games.log"
    shell: "Rscript {input[0]} > {log} 2>&1"


